name: ci
on:
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  prettier-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: install dependencies
        run: npm ci

      - name: run debug script
        run: ./debug-check.sh

      - name: check formatting on diff
        id: prettier
        shell: bash
        run: |
          set -euo pipefail
          BASE_REF="${{ github.event_name == 'pull_request' && github.base_ref || 'main' }}"
          git fetch origin "$BASE_REF"
          FILES=$(git diff --name-only "origin/$BASE_REF...HEAD" | grep -E '\.(js|ts|jsx|tsx|ejs|json|css|scss|md|html|ya?ml)$' || true)
          if [[ -n "$FILES" ]]; then
            echo "Checking formatting for:"
            echo "$FILES"
            UNFORMATTED=$(echo "$FILES" | xargs npx prettier --list-different || true)
            if [[ -n "$UNFORMATTED" ]]; then
              echo "unformatted<<EOF" >> "$GITHUB_OUTPUT"
              echo "$UNFORMATTED" >> "$GITHUB_OUTPUT"
              echo "EOF" >> "$GITHUB_OUTPUT"
              echo "❌ Some files need formatting"
              exit 1
            else
              echo "✅ All files are properly formatted"
            fi
          else
            echo "No files need formatting"
          fi

      - name: comment success on PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ CI passed successfully.'
            })

      - name: comment failure on PR
        if: failure()
        uses: actions/github-script@v7
        env:
          UNFORMATTED_FILES: ${{ steps.prettier.outputs.unformatted }}
        with:
          script: |
            const files = process.env.UNFORMATTED_FILES;
            const body = files
              ? `❌ Some files need formatting:\n${files}`
              : '❌ CI failed. Please check the logs.';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })
